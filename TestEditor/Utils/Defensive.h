#pragma once
#include <cassert>

//////////////////////////////////////////////////////////////////////////////////////////////

#define ReturnIf(x, ...) do{ if(x){ return __VA_ARGS__; } }while(false)
#define ReturnUnless(x, ...) do{ if(!(x)){ return __VA_ARGS__; } }while(false)

//////////////////////////////////////////////////////////////////////////////////////////////

#define ContinueIf(x) if(x){ continue; }
#define ContinueUnless(x) if(!(x)){ continue; }

//////////////////////////////////////////////////////////////////////////////////////////////

#define BreakIf(x) if(x){ break; }
#define BreakUnless(x) if(!(x)){ break; }

//////////////////////////////////////////////////////////////////////////////////////////////
//#define JumpIf(x,y) if(x){ goto y; }

//////////////////////////////////////////////////////////////////////////////////////////////

#define AssertReturnIf(x, ...) do{ if(x){ assert(!(#x)); return __VA_ARGS__; } }while(false)
#define AssertReturnUnless(x, ...) do{ if(!(x)){ assert(!(#x)); return __VA_ARGS__; } }while(false)

//////////////////////////////////////////////////////////////////////////////////////////////

#define AssertContinueIf(x) { if(x){ assert(!(#x)); continue; } }
#define AssertContinueUnless(x) { if(!(x)){ assert(!(#x)); continue; } }

//////////////////////////////////////////////////////////////////////////////////////////////

#define AssertBreakIf(x) { if(x){ assert(!(#x)); break; } }
#define AssertBreakUnless(x) { if(!(x)){ assert(!(#x)); break; } }

//////////////////////////////////////////////////////////////////////////////////////////////

//#define DO_ONCE static bool b##__LINE__ = true; if(b##__LINE__ && !(b##__LINE__ = false))

//////////////////////////////////////////////////////////////////////////////////////////////
